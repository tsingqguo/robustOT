# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from msot.tools.test_server.proto import servicedef_pb2 as msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2


class MSOTTestServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.init = channel.unary_unary(
                '/MSOTTestService/init',
                request_serializer=msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FeedFrameRequest.SerializeToString,
                response_deserializer=msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FeedFrameResponse.FromString,
                )
        self.track = channel.unary_unary(
                '/MSOTTestService/track',
                request_serializer=msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FeedFrameRequest.SerializeToString,
                response_deserializer=msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FeedFrameResponse.FromString,
                )
        self.finish = channel.unary_unary(
                '/MSOTTestService/finish',
                request_serializer=msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FinishRequest.SerializeToString,
                response_deserializer=msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FinishResponse.FromString,
                )


class MSOTTestServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def track(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def finish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MSOTTestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'init': grpc.unary_unary_rpc_method_handler(
                    servicer.init,
                    request_deserializer=msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FeedFrameRequest.FromString,
                    response_serializer=msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FeedFrameResponse.SerializeToString,
            ),
            'track': grpc.unary_unary_rpc_method_handler(
                    servicer.track,
                    request_deserializer=msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FeedFrameRequest.FromString,
                    response_serializer=msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FeedFrameResponse.SerializeToString,
            ),
            'finish': grpc.unary_unary_rpc_method_handler(
                    servicer.finish,
                    request_deserializer=msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FinishRequest.FromString,
                    response_serializer=msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FinishResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MSOTTestService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MSOTTestService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MSOTTestService/init',
            msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FeedFrameRequest.SerializeToString,
            msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FeedFrameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def track(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MSOTTestService/track',
            msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FeedFrameRequest.SerializeToString,
            msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FeedFrameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def finish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MSOTTestService/finish',
            msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FinishRequest.SerializeToString,
            msot_dot_tools_dot_test__server_dot_proto_dot_servicedef__pb2.FinishResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
